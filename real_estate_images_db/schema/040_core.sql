SET search_path = core, public;

-- Users
CREATE TABLE IF NOT EXISTS users (
  user_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  email CITEXT NOT NULL UNIQUE,
  email_norm TEXT GENERATED ALWAYS AS (lower(email::text)) STORED,
  password_hash TEXT NOT NULL, -- Argon2/bcrypt hash generated by backend
  full_name_enc BYTEA,         -- encrypted full name (PII)
  company_enc BYTEA,           -- encrypted organization name (optional)
  phone_enc BYTEA,             -- encrypted phone number (PII)
  is_email_verified BOOLEAN NOT NULL DEFAULT FALSE,
  created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  deleted_at TIMESTAMPTZ
);

COMMENT ON COLUMN users.full_name_enc IS 'PII: Encrypted with pgp_sym_encrypt at write-time by backend.';
COMMENT ON COLUMN users.company_enc IS 'PII: Encrypted with pgp_sym_encrypt at write-time by backend.';
COMMENT ON COLUMN users.phone_enc IS 'PII: Encrypted with pgp_sym_encrypt at write-time by backend.';

CREATE INDEX IF NOT EXISTS idx_users_email_norm ON users(email_norm);
CREATE INDEX IF NOT EXISTS idx_users_created_at ON users(created_at);

-- Projects/Properties (optional anchor for images)
CREATE TABLE IF NOT EXISTS properties (
  property_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID NOT NULL REFERENCES users(user_id) ON DELETE CASCADE,
  title TEXT NOT NULL,
  address_enc BYTEA, -- encrypted
  city_enc BYTEA,
  state_enc BYTEA,
  postal_code_enc BYTEA,
  country TEXT,
  created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  deleted_at TIMESTAMPTZ
);

CREATE INDEX IF NOT EXISTS idx_properties_user ON properties(user_id);
CREATE INDEX IF NOT EXISTS idx_properties_created ON properties(created_at);

-- Images
CREATE TABLE IF NOT EXISTS images (
  image_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID NOT NULL REFERENCES users(user_id) ON DELETE CASCADE,
  property_id UUID REFERENCES properties(property_id) ON DELETE SET NULL,
  -- Storage references (no binary in DB; use object storage)
  original_url TEXT NOT NULL,
  enhanced_url TEXT,
  -- metadata
  format TEXT CHECK (format IN ('jpg','jpeg','png','webp','tiff','heic') OR format IS NULL),
  width INT CHECK (width > 0),
  height INT CHECK (height > 0),
  size_bytes BIGINT CHECK (size_bytes >= 0),
  checksum TEXT, -- e.g., sha256 of uploaded file
  created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  deleted_at TIMESTAMPTZ
);

CREATE INDEX IF NOT EXISTS idx_images_user ON images(user_id);
CREATE INDEX IF NOT EXISTS idx_images_property ON images(property_id);
CREATE INDEX IF NOT EXISTS idx_images_created ON images(created_at);

-- Edit requests/results
CREATE TABLE IF NOT EXISTS edit_requests (
  request_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  image_id UUID NOT NULL REFERENCES images(image_id) ON DELETE CASCADE,
  user_id UUID NOT NULL REFERENCES users(user_id) ON DELETE CASCADE,
  prompt TEXT NOT NULL,
  status TEXT NOT NULL CHECK (status IN ('queued','processing','succeeded','failed','canceled')),
  result_metadata JSONB,
  before_url TEXT, -- redundant; useful snapshot
  after_url TEXT,
  vendor_job_id TEXT, -- ID from Google Nano Banana API
  error_message TEXT,
  created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

CREATE INDEX IF NOT EXISTS idx_edit_requests_image ON edit_requests(image_id);
CREATE INDEX IF NOT EXISTS idx_edit_requests_user ON edit_requests(user_id);
CREATE INDEX IF NOT EXISTS idx_edit_requests_status ON edit_requests(status);

-- Usage tracking (trial and subscription consumption)
CREATE TABLE IF NOT EXISTS usage_counters (
  usage_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID NOT NULL REFERENCES users(user_id) ON DELETE CASCADE,
  period_start DATE NOT NULL,
  period_end DATE NOT NULL,
  images_processed INT NOT NULL DEFAULT 0 CHECK (images_processed >= 0),
  created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  UNIQUE (user_id, period_start, period_end)
);

-- API tokens for service-to-service (encrypted)
CREATE TABLE IF NOT EXISTS api_tokens (
  token_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,
  token_enc BYTEA NOT NULL, -- encrypted token
  scopes TEXT[] NOT NULL DEFAULT ARRAY['read','write'],
  expires_at TIMESTAMPTZ,
  created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  revoked_at TIMESTAMPTZ
);

-- Basic soft-delete and update timestamp triggers (implemented in 090_triggers.sql)
```
